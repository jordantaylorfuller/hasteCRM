name: CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  DOCKER_REGISTRY: docker.io/hastenyc
  HELM_VERSION: '3.13.0'

jobs:
  # ==========================================
  # Staging Deployment
  # ==========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.haste.nyc
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.4'
      
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}
      
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.STAGING_KUBE_CONFIG }}" | base64 -d > ~/.kube/config
      
      - name: Deploy database migrations
        run: |
          kubectl create job migrate-${{ github.sha }} \
            --from=cronjob/database-migration \
            -n hastecrm-staging
          kubectl wait --for=condition=complete \
            --timeout=300s \
            job/migrate-${{ github.sha }} \
            -n hastecrm-staging
      
      - name: Deploy with Helm
        run: |
          helm upgrade --install hastecrm ./kubernetes/helm/hastecrm \
            --namespace hastecrm-staging \
            --create-namespace \
            --values ./kubernetes/helm/hastecrm/values.staging.yaml \
            --set image.tag=${{ github.sha }} \
            --set ingress.hosts[0].host=staging.haste.nyc \
            --wait \
            --timeout 10m
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/hastecrm-api -n hastecrm-staging
          kubectl rollout status deployment/hastecrm-web -n hastecrm-staging
          kubectl rollout status deployment/hastecrm-worker -n hastecrm-staging
      
      - name: Run smoke tests
        run: |
          npm install -g newman
          newman run ./tests/postman/staging-smoke-tests.json \
            --env-var "baseUrl=https://staging-api.haste.nyc" \
            --env-var "apiKey=${{ secrets.STAGING_API_KEY }}"

  # ==========================================
  # Production Deployment
  # ==========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [deploy-staging]
    if: github.event.inputs.environment == 'production' || (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy prod]'))
    environment:
      name: production
      url: https://www.haste.nyc
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.4'
      
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}
      
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.PROD_KUBE_CONFIG }}" | base64 -d > ~/.kube/config
      
      - name: Create database backup
        run: |
          kubectl exec -n hastecrm-production \
            deployment/postgres \
            -- pg_dump -U postgres hasteCRM_prod \
            | gzip > backup-${{ github.sha }}.sql.gz
          
          aws s3 cp backup-${{ github.sha }}.sql.gz \
            s3://hastecrm-backups/prod/backup-${{ github.sha }}.sql.gz
      
      - name: Deploy database migrations
        run: |
          kubectl create job migrate-${{ github.sha }} \
            --from=cronjob/database-migration \
            -n hastecrm-production
          kubectl wait --for=condition=complete \
            --timeout=300s \
            job/migrate-${{ github.sha }} \
            -n hastecrm-production
      
      - name: Blue-Green Deployment - Stage Green
        run: |
          helm upgrade --install hastecrm-green ./kubernetes/helm/hastecrm \
            --namespace hastecrm-production \
            --create-namespace \
            --values ./kubernetes/helm/hastecrm/values.production.yaml \
            --set image.tag=${{ github.sha }} \
            --set blueGreen.productionSlot=green \
            --set replicaCount.api=3 \
            --set replicaCount.web=3 \
            --set replicaCount.worker=2 \
            --wait \
            --timeout 15m
      
      - name: Run production tests on Green
        run: |
          GREEN_URL=$(kubectl get service hastecrm-green-api \
            -n hastecrm-production \
            -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          npm install -g newman
          newman run ./tests/postman/production-tests.json \
            --env-var "baseUrl=https://${GREEN_URL}" \
            --env-var "apiKey=${{ secrets.PROD_API_KEY }}"
      
      - name: Switch traffic to Green
        run: |
          kubectl patch service hastecrm-api \
            -n hastecrm-production \
            -p '{"spec":{"selector":{"deployment":"green"}}}'
          
          kubectl patch service hastecrm-web \
            -n hastecrm-production \
            -p '{"spec":{"selector":{"deployment":"green"}}}'
      
      - name: Monitor metrics
        run: |
          sleep 300  # Wait 5 minutes
          
          # Check error rate
          ERROR_RATE=$(curl -s "${{ secrets.DATADOG_API_URL }}/query" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -H "DD-APPLICATION-KEY: ${{ secrets.DATADOG_APP_KEY }}" \
            -G --data-urlencode "query=avg:hastecrm.api.error_rate{env:production}" \
            | jq '.series[0].pointlist[-1][1]')
          
          if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
            echo "Error rate too high: $ERROR_RATE"
            exit 1
          fi
      
      - name: Cleanup Blue deployment
        if: success()
        run: |
          helm uninstall hastecrm-blue \
            --namespace hastecrm-production \
            --wait || true
      
      - name: Rollback on failure
        if: failure()
        run: |
          kubectl patch service hastecrm-api \
            -n hastecrm-production \
            -p '{"spec":{"selector":{"deployment":"blue"}}}'
          
          kubectl patch service hastecrm-web \
            -n hastecrm-production \
            -p '{"spec":{"selector":{"deployment":"blue"}}}'
          
          helm uninstall hastecrm-green \
            --namespace hastecrm-production \
            --wait

  # ==========================================
  # Post-Deployment Tasks
  # ==========================================
  post-deploy:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
      - name: Invalidate CDN cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
      
      - name: Update status page
        run: |
          curl -X POST https://api.statuspage.io/v1/pages/${{ secrets.STATUSPAGE_ID }}/incidents \
            -H "Authorization: OAuth ${{ secrets.STATUSPAGE_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "incident": {
                "name": "Deployment completed",
                "status": "resolved",
                "body": "Version ${{ github.sha }} deployed successfully"
              }
            }'
      
      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ðŸš€ Production Deployment Success!
            Version: ${{ github.sha }}
            Environment: Production
            URL: https://www.haste.nyc
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes in this release
            - Commit: ${{ github.sha }}
            - Deployed to production
            
            [View deployment](https://www.haste.nyc)
          draft: false
          prerelease: false