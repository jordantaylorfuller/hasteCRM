input {
  # Beats input for Filebeat
  beats {
    port => 5044
  }

  # TCP input for application logs
  tcp {
    port => 5000
    codec => json_lines
  }

  # UDP input for syslog
  udp {
    port => 5000
    type => syslog
  }
}

filter {
  # Parse Docker container logs
  if [docker] {
    json {
      source => "message"
      target => "app"
      skip_on_invalid_json => true
    }
    
    # Extract container info
    mutate {
      add_field => {
        "container_name" => "%{[docker][container][name]}"
        "container_id" => "%{[docker][container][id]}"
        "service" => "%{[docker][container][labels][com.docker.compose.service]}"
      }
    }
  }

  # Parse application logs
  if [app][level] {
    mutate {
      add_field => {
        "log_level" => "%{[app][level]}"
        "log_message" => "%{[app][message]}"
      }
    }
    
    # Add severity for log level
    if [log_level] == "error" or [log_level] == "ERROR" {
      mutate {
        add_field => { "severity" => "error" }
      }
    } else if [log_level] == "warn" or [log_level] == "WARN" {
      mutate {
        add_field => { "severity" => "warning" }
      }
    } else {
      mutate {
        add_field => { "severity" => "info" }
      }
    }
  }

  # Parse GraphQL queries
  if [app][operationName] {
    mutate {
      add_field => {
        "graphql_operation" => "%{[app][operationName]}"
        "graphql_type" => "%{[app][operationType]}"
      }
    }
  }

  # Extract request information
  if [app][request] {
    mutate {
      add_field => {
        "request_method" => "%{[app][request][method]}"
        "request_url" => "%{[app][request][url]}"
        "request_ip" => "%{[app][request][ip]}"
        "user_id" => "%{[app][request][userId]}"
      }
    }
  }

  # Add timestamp
  date {
    match => [ "[app][timestamp]", "ISO8601" ]
    target => "@timestamp"
  }

  # Remove processed fields
  mutate {
    remove_field => [ "message", "host", "port" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "hastecrm-%{+YYYY.MM.dd}"
    template_name => "hastecrm"
    template => "/usr/share/logstash/templates/hastecrm.json"
    template_overwrite => true
  }

  # Debug output
  stdout {
    codec => rubydebug
  }
}